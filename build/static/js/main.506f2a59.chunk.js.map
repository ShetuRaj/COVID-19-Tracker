{"version":3,"sources":["component/CaseList.js","component/Countries.js","component/World.js","component/TopDistricts.js","component/Chart.js","component/Stats.js","component/New.js","component/Details.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CaseList","props","state","posts","recov","dead","samples","new1","num","Axios","get","then","response","setState","data","statewise","extra","cases_time_series","extra1","new3","confirmed","length","totalconfirmed","totalrecovered","totaldeceased","recovered","deaths","total","tested","totalsamplestested","catch","error","this","states","i","parseInt","percent","thousand","className","map","ind","key","end","duration","delay","style","color","display","target","href","statecode","icon","faExternalLinkAlt","id","marginLeft","faBriefcaseMedical","marginTop","faUsers","faSkullCrossbones","faVial","faNotesMedical","faCheckCircle","Component","Countries","sort","a","b","TotalConfirmed","Country","TotalRecovered","TotalDeaths","toLowerCase","World","Global","world","Object","keys","forEach","push","value","entries","values","start","TopDistricts","final","finaldist","transformFlat","obj","result","stateName","districtData","districtName","active","deceased","district","pass","districts","dist","Chart","chartData","labels","datasets","label","backgroundColor","options","title","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","defaultProps","location","Stats","date","dailyconfirmed","borderColor","New","dailydeceased","dailyrecovered","width","Details","fill","App","to","faHome","faBuilding","faPoll","faGlobe","faChartBar","path","src","logo","alt","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.506f2a59.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\n\r\nimport CountUp from 'react-countup'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle,faNotesMedical,faExternalLinkAlt,faArrowUp,faCircle,\r\nfaBriefcaseMedical,faSkullCrossbones,faUsers,faVial} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './apistyle.css'\r\n\r\nclass CaseList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             posts: [] ,\r\n             recov:0,\r\n             dead:0,\r\n             samples:0,\r\n             new1:0,\r\n             num:0\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        Axios.get('https://api.covid19india.org/data.json')\r\n        .then(response => {\r\n            //console.log(response)\r\n            this.setState({posts:response.data.statewise})\r\n            const extra=response.data.cases_time_series\r\n            \r\n            // console.log(new1)\r\n            var extra1=response.data.statewise\r\n\r\n            // console.log(new2-new1)\r\n            var recov=0,dead=0;\r\n            var new3=extra1[0].confirmed-extra[extra.length-1].totalconfirmed\r\n            if(new3<=100)\r\n            {\r\n                new3=extra[extra.length-1].totalconfirmed-extra[extra.length-2].totalconfirmed\r\n                recov=extra[extra.length-1].totalrecovered-extra[extra.length-2].totalrecovered\r\n                dead=extra[extra.length-1].totaldeceased-extra[extra.length-2].totaldeceased\r\n            }\r\n            else\r\n            {\r\n                new3=extra1[0].confirmed-extra[extra.length-1].totalconfirmed\r\n                recov=extra1[0].recovered-extra[extra.length-1].totalrecovered\r\n                dead=extra1[0].deaths-extra[extra.length-1].totaldeceased\r\n            }\r\n\r\n            this.setState({new1:new3}) \r\n            this.setState({recov:recov})\r\n            this.setState({dead:dead})\r\n            \r\n            //console.log(response.data.statewise)\r\n            const total = response.data.tested\r\n            var samples=total[total.length-1].totalsamplestested-total[total.length-2].totalsamplestested\r\n            this.setState({samples:samples})\r\n            var len=total.length\r\n            var tested=total[len-1].totalsamplestested\r\n            this.setState({num:tested})            \r\n            //console.log(total[len-1].totalsamplestested)\r\n        })\r\n        .catch(error => {\r\n            //console.log(error)\r\n        })\r\n    }\r\n    \r\n    \r\n\r\n    render() {\r\n        const posts = this.state.posts\r\n        var new1=this.state.new1\r\n        var recov=this.state.recov\r\n        var dead=this.state.dead\r\n        var samples=this.state.samples\r\n        var states=[]\r\n        var num=[]\r\n        var total=0\r\n        for (var i=1;i<posts.length;i+=1) {\r\n          //console.log(posts[i].state);\r\n          states[i-1]=posts[i].state\r\n          num[i-1]=posts[i].confirmed\r\n          total=total+parseInt(posts[i].confirmed)\r\n          \r\n      }\r\n      //console.log(total)\r\n      var tested=this.state.num\r\n       var percent=((total/tested)*100)\r\n       var thousand=(tested/(1.4*1000000))\r\n      //console.log(percent)\r\n      //console.log(tested)\r\n        //console.log({states})\r\n        //console.log({num})\r\n        return (\r\n            <div>\r\n                <div className=\"books\">\r\n                    {\r\n      \r\n                         posts.length?\r\n                         posts.map( (posts,ind) => {\r\n                            return ind!=0 ?\r\n                                \r\n                                  \r\n                                \r\n                                <div className=\"book\" key={posts.state}>\r\n                                  \r\n                                  <h2>{posts.state}</h2>\r\n                                  <h1><CountUp \r\n                                         end={posts.confirmed}\r\n                                         duration={4} delay={1} /></h1>\r\n                                  <div className=\"details\" key={posts.state}>\r\n                                    <h3 style={{color: \"springgreen\"}}>Recovered - <CountUp \r\n                                         end={posts.recovered}\r\n                                         duration={4} delay={1} /></h3>\r\n                                    <h3 style={{color: \"red\"}}>Deaths - <CountUp \r\n                                         end={posts.deaths}\r\n                                         duration={4} delay={1} /></h3>\r\n                                    <a style={{display: \"table-cell\"}}  target=\"_blank\" \r\n                                href={`https://www.covid19india.org/state/${posts.statecode}`}\r\n                                className=\"link11\"> <p className=\"design1\">Click here to See More <FontAwesomeIcon icon={faExternalLinkAlt} /></p></a>\r\n                                  </div>\r\n\r\n\r\n                                  \r\n                                </div>\r\n                                \r\n                                \r\n                                :\r\n                                <div>\r\n                                  <h1 className=\"head1\">COVID-19 India Tracker</h1>\r\n                                <div className=\"first\" >\r\n                                    \r\n                                    <div className=\"gradient-border\" id=\"box\">\r\n                                    <h1><CountUp \r\n                                          end={posts.confirmed}\r\n                                          duration={3} delay={1}/>\r\n                                            <p style={{marginLeft:\"50px\"}} className=\"title\">Cases <FontAwesomeIcon icon={faBriefcaseMedical} />\r\n                                            <p style={{marginTop:\"8px\",marginLeft:\"11px\"}} className=\"blink\"> (+<CountUp \r\n                                            end={new1}\r\n                                            duration={5} delay={1}/>)</p></p>\r\n                                    </h1>\r\n                                        \r\n                                    </div>\r\n                                        \r\n                \r\n                                    <div className=\"gradient-border\" id=\"box\">\r\n                                        \r\n                                        <h1><CountUp \r\n                                          end={posts.recovered}\r\n                                          duration={3} delay={1} />\r\n                                            <p style={{marginLeft:\"25px\"}}className=\"title\">Recovered <FontAwesomeIcon icon={faUsers} />\r\n                                            <p style={{marginTop:\"8px\",marginLeft:\"45px\"}} className=\"blink\">(+<CountUp \r\n                                            end={recov}\r\n                                            duration={5} delay={1}/>)</p></p>\r\n                                        </h1>\r\n                                    </div>\r\n                \r\n                                    <div className=\"gradient-border\" id=\"box\">\r\n                                        <h1><CountUp \r\n                                          end={posts.deaths}\r\n                                          duration={3} delay={1} />\r\n                                            <p style={{marginLeft:\"40px\"}} className=\"title\">Dead <FontAwesomeIcon icon={faSkullCrossbones} />\r\n                                            <p style={{marginTop:\"8px\",marginLeft:\"13px\"}} className=\"blink\">(+<CountUp \r\n                                            end={dead}\r\n                                            duration={10} delay={1}/>)</p></p>\r\n                                        </h1>\r\n                                    </div>\r\n\r\n                                    <div className=\"gradient-border1\" id=\"box1\">\r\n                                        <h1><CountUp \r\n                                          end={tested}\r\n                                          duration={3} delay={1} />\r\n                                            <p style={{marginLeft:\"60px\"}} className=\"title\">Tested <FontAwesomeIcon icon={faVial} />\r\n                                            <p style={{marginTop:\"8px\",marginLeft:\"06px\"}} className=\"blink\">(+<CountUp \r\n                                            end={samples}\r\n                                            duration={4} delay={1}/>)</p></p>\r\n                                        </h1>\r\n                                    </div>\r\n\r\n                                    <div className=\"gradient-border\"  id=\"box\">\r\n                                        <h1 style={{marginTop:\"50px\"}}><div style={{marginLeft:\"60px\"}}><CountUp \r\n                                          end={percent}\r\n                                          duration={6} delay={1} /> %</div>\r\n                                            <p className=\"title\">Positivity Rate <FontAwesomeIcon icon={faNotesMedical} /></p>\r\n                                        </h1>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"gradient-border\"  id=\"box\" >\r\n                                        \r\n                                        <h1 style={{marginTop:\"50px\"}}><div style={{marginLeft:\"85px\",marginTop:\"20px\"}}><CountUp \r\n                                          end={thousand}\r\n                                          duration={6} delay={1} /></div>\r\n                                            <p className=\"title\">Number of Tests\r\n                                            <p className=\"title\" style={{marginLeft:\"40px\"}}>Per 1000 <FontAwesomeIcon icon={faCheckCircle} /></p></p>\r\n                                            \r\n                                        </h1>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                <br></br>\r\n                                <br></br>\r\n                                    <h1 className=\"head1\">State Wise Count</h1>\r\n                                \r\n                                \r\n                              </div>\r\n                          }\r\n                              ):null\r\n                    }\r\n                     \r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseList\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport CountUp from 'react-countup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee,faLocationArrow,faChartBar,faExternalLinkAlt,faBriefcaseMedical,faSkullCrossbones,faUsers, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport './style2.css'\r\nclass Countries extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            posts: [] \r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        Axios.get('https://api.covid19api.com/summary')\r\n        .then(response => {\r\n            //console.log(response.data.Countries)\r\n            this.setState({posts:response.data.Countries})\r\n        })\r\n        .catch(error => {\r\n            //console.log(error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {posts} = this.state\r\n        posts.sort((a, b) => (a.TotalConfirmed > b.TotalConfirmed) ? -1 : 1)\r\n        //console.log(posts)\r\n        \r\n        return (\r\n            <div>\r\n                \r\n                <h1 className=\"head111\">COVID-19 Country Tracker</h1>\r\n                <h2 className=\"hd\">(Click/Tap on each country to get details)</h2>\r\n                <div className=\"books11\">\r\n                    {\r\n      \r\n                         posts.length?\r\n                         posts.map( (posts,ind) => \r\n                         \r\n                         <div className=\"book11\" key={posts.Country}>\r\n                            \r\n                         <h2>{ind+1}. {posts.Country} </h2>\r\n                         <h1><CountUp \r\n                                end={posts.TotalConfirmed}\r\n                                duration={4} delay={1} /></h1>\r\n                         <div className=\"details11\" key={posts.Country}>\r\n                           <h3 style={{color: \"springgreen\"}}>Recovered - <CountUp \r\n                                end={posts.TotalRecovered}\r\n                                duration={4} delay={1} /></h3>\r\n                           <h3 style={{color: \"red\", marginLeft:\"10px\"}}>Deaths - <CountUp \r\n                                end={posts.TotalDeaths}\r\n                                duration={4} delay={1} /></h3>\r\n                                <a style={{display: \"table-cell\"}}  target=\"_blank\" \r\n                                href={`https://www.worldometers.info/coronavirus/country/${(posts.Country).toLowerCase()}/`} \r\n                                className=\"link11\"> <p className=\"design1\">Click here to See More <FontAwesomeIcon icon={faExternalLinkAlt} /></p></a>\r\n                           \r\n\r\n                         </div>\r\n\r\n                         \r\n                         \r\n                       </div>\r\n                       \r\n                         \r\n                              ):null\r\n                    }\r\n                     \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Countries\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport CountUp from 'react-countup'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee,faLocationArrow,faChartBar,faExternalLinkAlt,faBriefcaseMedical,faSkullCrossbones,faUsers, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport './style2.css'\r\nclass World extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            posts: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        Axios.get('https://api.covid19api.com/summary')\r\n        .then(response => {\r\n            //console.log(response.data)\r\n            // this.setState({lists:response.data})\r\n            // \r\n            this.setState({posts:response.data.Global})\r\n            // this.setState({lists:response.data.statewise.state})\r\n            // //console.log(this.state.posts.map((a,ind) =>{ \r\n            //   return ind!=0?\r\n            //   a.state:\r\n            // null}));\r\n            // const {limp}=this.state.posts?this.state.posts.map((a,ind) =>{ \r\n            //   return ind!=0?\r\n            //   a.state:\r\n            // null}):null\r\n            // //console.log({limp});\r\n        })\r\n        .catch(error => {\r\n            //console.log(error)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {posts} = this.state\r\n        \r\n        //console.log({posts})\r\n        //console.log(posts.TotalConfirmed)\r\n        var world=[];\r\n        Object.keys(posts).forEach(function(key){\r\n            world.push(<option value={key}>{posts[key]}</option>);\r\n        });\r\n        var result = Object.entries(posts)\r\n        var obj={\"1\": 500, \"2\": 15, \"5\": 4, \"4\": 480, \"10\": 87}\r\n        var confirmed=Object.values(obj)\r\n        //console.log(confirmed)\r\n        var num=typeof(posts[0])\r\n        // console.log(result)\r\n        // console.log(world)\r\n         var conf=parseInt(posts.TotalConfirmed)\r\n        return (\r\n                <div>\r\n                    <h1 className=\"head1\">COVID-19 World Wide Tracker</h1>\r\n                    \r\n                <div className=\"first\" >\r\n                                    \r\n                                    <div className=\"gradient-border\" id=\"box\" key={posts.TotalConfirmed}>\r\n                                    <h2><CountUp end={posts.TotalConfirmed} start={0} duration={4}/>\r\n  \r\n                                          \r\n                                            <p className=\"title\" style={{marginLeft:\"50px\"}}>Cases <FontAwesomeIcon icon={faBriefcaseMedical} /></p>\r\n                                            \r\n                                    </h2>\r\n                                        \r\n                                    </div>\r\n                                        \r\n                \r\n                                    <div className=\"gradient-border\" id=\"box\" key={posts.TotalConfirmed}>\r\n                                        \r\n                                        <h2><CountUp \r\n                                          end={posts.TotalRecovered} start={0} duration={4}\r\n                                         />\r\n                                            <p className=\"title\" style={{marginLeft:\"25px\"}}>Recovered <FontAwesomeIcon icon={faUsers} /></p>\r\n                                            \r\n                                        </h2>\r\n                                    </div>\r\n                \r\n                                    <div className=\"gradient-border\" id=\"box\" key={posts.TotalConfirmed}>\r\n                                        <h2><CountUp \r\n                                          end={posts.TotalDeaths}\r\n                                          start={0} duration={4}/>\r\n                                            <p className=\"title\" style={{marginLeft:\"40px\"}}>Dead <FontAwesomeIcon icon={faSkullCrossbones} /></p>\r\n                                            \r\n                                        </h2>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n                                \r\n                                </div>\r\n                \r\n                          \r\n                \r\n        )\r\n    }\r\n}\r\n\r\nexport default World\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport CountUp from 'react-countup';\r\nimport './style3.css'\r\nclass TopDistricts extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             states:{},\r\n             final:[],\r\n             finaldist:[]\r\n        }\r\n    }\r\n    \r\n\r\n    componentDidMount() {\r\n        Axios.get('https://api.covid19india.org/state_district_wise.json')\r\n        .then(response => {\r\n            //console.log(response)\r\n            //console.log(response.data)\r\n            this.setState({states:response.data})\r\n           \r\n            const states=response.data\r\n            \r\n            \r\n\r\n                const transform = (obj) => Object.entries(states).map(([stateName, { districtData }]) => ({\r\n                    state: stateName,\r\n                    districts: Object.entries(districtData).map(([districtName, { active, delta }]) => ({\r\n                      district: districtName,\r\n                      active,\r\n                      ...delta,\r\n                    })),\r\n                  }));\r\n                  \r\n                  const transformFlat = (obj) => {\r\n                    const result = [];\r\n                    Object.entries(obj).forEach(([stateName, { districtData }]) =>\r\n                      Object.entries(districtData).forEach(([districtName, { active, confirmed,deceased,recovered }]) =>\r\n                        result.push({\r\n                          state: stateName,\r\n                          district: districtName,\r\n                          active,\r\n                          confirmed,\r\n                          deceased,\r\n                          recovered\r\n                        })\r\n                      )\r\n                    );\r\n                    return result;\r\n                  };\r\n                  \r\n                  // transform the data\r\n                  //console.log(transform(states));\r\n                  // var pass1=[] \r\n                  // pass1=transform(states)\r\n                  // pass1.sort((a, b) => (a.districts.confirmed > b.districts.confirmed) ? -1 : 1)\r\n                  // //console.log(pass1)\r\n                  //console.log(transformFlat(states));\r\n                  var pass=[]\r\n                  pass=transformFlat(states)\r\n                  this.setState({final:pass})\r\n                  //console.log(this.state.final)\r\n                  pass.sort((a, b) => (a.confirmed > b.confirmed) ? 1 : -1)\r\n                  //console.log(pass)\r\n                  \r\n                  \r\n                  // you could loop like this through it\r\n                  // for (const state of transform(states)) {\r\n                  //   //console.log(state.state);\r\n                  //   for (const district of state.districts) {\r\n                  //     //console.log(district);\r\n                  //   }\r\n                  // }\r\n\r\n                  for (const state of transformFlat(states)) {\r\n                    //console.log(state.state);\r\n                    for (const district of state.districts) {\r\n                      //console.log(district);\r\n                    }\r\n                  }\r\n                 \r\n        // const dist1=this.state.final;\r\n        // //console.log(dist1)\r\n        // dist1.sort((a, b) => (a.confirmed > b.confirmed) ? -1 : 1)\r\n        // //console.log(dist1)\r\n        // var fdist=[]\r\n        // for(var i=0;i<100;i++){\r\n        //     fdist[i]=dist1[i];\r\n        // }\r\n        // //console.log(fdist)\r\n        // this.setState({finaldist:dist1})\r\n               \r\n        })\r\n        .catch(error => {\r\n            //console.log(error)\r\n        })\r\n    }\r\n    render() {\r\n        const dist=this.state.final;\r\n        //console.log(dist)\r\n        dist.sort((a, b) => (a.confirmed > b.confirmed) ? -1 : 1);\r\n        //console.log(dist)\r\n        // const fdist=this.state.finaldist\r\n        // fdist.sort((a, b) => (a.confirmed > b.confirmed) ? -1 : 1)\r\n        // //console.log(fdist)\r\n        return (\r\n            <div>\r\n                <h1 className=\"head11\">Top 100 Districts in India</h1>\r\n                 <h2 className=\"hd\">(Click/Tap on each district to know more)</h2>\r\n                <div className=\"books1\">\r\n                    {\r\n      \r\n                         dist.length?\r\n                         dist.map( (dist,ind) => {\r\n                             return ind<=99 ? (\r\n                         <a  className=\"link1\"> \r\n                         <div className=\"book1\" key={dist.district} >\r\n                             \r\n                         <h2>{ind+1}. {dist.district}</h2>\r\n                         <h3>({dist.state})</h3>\r\n                         <h1 style={{color: \"azure\"}}><CountUp \r\n                                end={dist.confirmed}\r\n                                duration={4} delay={1} /></h1>\r\n                         <div className=\"details1\" key={dist.district}>\r\n                           <h4 style={{color: \"springgreen\"}}>Recovered - <CountUp \r\n                                end={dist.recovered}\r\n                                duration={4} delay={1} /></h4>\r\n                           <h4 style={{color: \"red\"}}> Deaths - <CountUp \r\n                                end={dist.deceased}\r\n                                duration={4} delay={1} /></h4>\r\n                            \r\n                           \r\n\r\n                         </div>\r\n\r\n                         \r\n                         \r\n                       </div>\r\n                       </a>):null\r\n                     }\r\n                              ):null\r\n                    }\r\n                     \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopDistricts\r\n","\r\nimport React, {Component} from 'react';\r\nimport {Bar, Line, Radar, Pie, Bubble, Polar,Scatter, Doughnut, HorizontalBar,} from 'react-chartjs-2';\r\nimport Axios from 'axios';\r\n\r\nclass Chart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData:props.chartData,\r\n      posts:[],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get('https://api.covid19india.org/data.json')\r\n    .then(response => {\r\n        //console.log(response)\r\n        // this.setState({lists:response.data})\r\n        // \r\n        this.setState({posts:response.data.statewise})\r\n        //console.log(response.data.statewise)\r\n        const posts = response.data.statewise\r\n        //console.log(posts)\r\n        var states=[]\r\n        var num=[]\r\n\r\n        for (var i=1;i<posts.length;i+=1) {\r\n          states[i-1]=posts[i].state\r\n          num[i-1]=posts[i].confirmed\r\n        }\r\n        //console.log(states)\r\n        //console.log(num)\r\n        this.setState({\r\n        chartData:{\r\n            labels: states,\r\n          datasets:[\r\n            {\r\n              label:'No. of Positive Cases',\r\n              data: num,\r\n              backgroundColor:[\r\n                \r\n                'rgba(255,3,0,1)',\r\n                'rgba(219,3,0,1)',\r\n                'rgba(152,3,0,1)',\r\n                'rgba(255,3,0,0.7)',\r\n                'rgba(101,191,217,1)',\r\n                'rgba(101,191,217,0.59)',\r\n                'rgba(101,79,161,0.98)',\r\n                'rgba(208,79,197,0.98)',\r\n                'rgba(208,79,197,0.65)',\r\n                'rgba(43,144,197,1)',\r\n                'rgba(43,144,197,0.56)',\r\n                'rgba(0,255,255,0.56)',\r\n                'rgba(0,208,255,1)',\r\n                'rgba(0,251,14,1)',\r\n                'rgba(0,251,14,0.6)',\r\n                'rgba(147,251,94,1)',\r\n                'rgba(212,101,212,1)',\r\n                'rgba(101,101,212,1)',\r\n                'rgba(234,101,212,1)',\r\n                'rgba(98,101,212,1)',\r\n                'rgba(89,101,212,1)',\r\n                'rgba(190,101,212,1)',\r\n                'rgba(199,101,212,1)',\r\n                'rgba(220,101,212,1)',\r\n                'rgba(190,101,212,1)',\r\n                'rgba(190,101,212,1)',\r\n                'rgba(150,101,160,1)',\r\n                'rgba(0,251,14,0.45)',\r\n                'rgba(90,200,120,1)',\r\n                'rgba(90,200,120,1)',\r\n                'rgba(150,101,160,1)',\r\n                'rgba(150,101,160,1)',\r\n                'rgba(150,101,160,1)',\r\n                'rgba(90,200,120,1)',\r\n                'rgba(90,200,120,1)',\r\n                'rgba(90,200,120,1)',\r\n                'rgba(90,200,120,1)',\r\n\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      });\r\n  \r\n    })\r\n    .catch(error => {\r\n        //console.log(error)\r\n    })\r\n}\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'bottom',\r\n    location:'City'\r\n  }\r\n\r\n\r\n  render(){\r\n    const {posts} = this.state\r\n        var states=[]\r\n        var num=[]\r\n\r\n        for (var i=1;i<posts.length;i+=1) {\r\n          states[i-1]=posts[i].state\r\n          num[i-1]=posts[i].confirmed\r\n      }\r\n    \r\n      \r\n    return (\r\n      <div className=\"chart\">\r\n        <br></br>\r\n        \r\n        <Bar\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'State-Wise Covid-19 Bar Chart', \r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n        <br></br>\r\n        <br></br>\r\n        <Doughnut\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'State-Wise Covid-19 Doughnut Chart',\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n        <br></br>\r\n      <br></br>\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'State-Wise Covid-19 Distribution',\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n      \r\n\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chart;","import React, {Component} from 'react';\r\nimport {Bar, Line, Bubble, Scatter} from 'react-chartjs-2';\r\nimport Axios from 'axios';\r\nimport './Style.css'\r\n\r\nclass Stats extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData:props.chartData,\r\n      posts:[]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get('https://api.covid19india.org/data.json')\r\n    .then(response => {\r\n        //console.log(response)\r\n        this.setState({posts:response.data.cases_time_series})\r\n        //console.log(response.data.cases_time_series)\r\n        \r\n        \r\n        const posts = response.data.cases_time_series\r\n        //console.log(posts)\r\n        var states=[]\r\n        var num=[]\r\n\r\n        for (var i=31;i<posts.length;i+=1) {\r\n          states[i-31]=posts[i].date\r\n          num[i-31]=posts[i].dailyconfirmed\r\n        }\r\n        //console.log(states)\r\n        //console.log(num)\r\n        this.setState({\r\n        chartData:{\r\n            labels: states\r\n          \r\n          \r\n          ,\r\n          datasets:[\r\n            {\r\n              label:'No. of Positive Cases Per Day',\r\n              data: num,\r\n              \r\n              borderColor: 'rgba(0,60,100,1)',\r\n              backgroundColor:\r\n                \r\n                'rgba(0,60,100,1)',\r\n                \r\n              \r\n            }\r\n          ]\r\n        }\r\n      });\r\n  \r\n    })\r\n    .catch(error => {\r\n        //console.log(error)\r\n    })\r\n}\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'bottom',\r\n    location:'City'\r\n  }\r\n\r\n\r\n  render(){\r\n      \r\n    return (\r\n      <div className=\"chart\">\r\n          \r\n          <br></br>\r\n          <br></br>\r\n        <Bar\r\n          data={this.state.chartData}\r\n          options={{\r\n           \r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'No. of Positive Cases Per Day Bar Chart', \r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n         className=\"elements\"/>\r\n\r\n          <br></br>\r\n          <br></br>\r\n        \r\n\r\n          \r\n\r\n        <br></br>\r\n\r\n        \r\n        \r\n        \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Stats;","import React, {Component} from 'react';\r\nimport {Bar, Line, Bubble, Scatter} from 'react-chartjs-2';\r\nimport Axios from 'axios';\r\n\r\nclass New extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData:props.chartData,\r\n      posts:[]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get('https://api.covid19india.org/data.json')\r\n    .then(response => {\r\n        //console.log(response)\r\n        this.setState({posts:response.data.cases_time_series})\r\n        //console.log(response.data.cases_time_series)\r\n        \r\n        \r\n        const posts = response.data.cases_time_series\r\n        //console.log(posts)\r\n        var states=[]\r\n        \r\n        var confirmed=[]\r\n        var active=[]\r\n        var deceased=[]\r\n\r\n        for (var i=31;i<posts.length;i+=1) {\r\n          states[i-31]=posts[i].date\r\n          confirmed[i-31]=posts[i].dailyconfirmed\r\n          deceased[i-31]=posts[i].dailydeceased\r\n          active[i-31]=posts[i].dailyrecovered\r\n        }\r\n        //console.log(states)\r\n        // //console.log(num)\r\n        this.setState({\r\n        chartData:{\r\n            labels: states\r\n          \r\n          \r\n          ,\r\n          datasets:[\r\n            {\r\n              label:'New Cases',\r\n              data: confirmed,\r\n              backgroundColor:\r\n                \r\n                'rgba(0,60,100,1)',\r\n              borderColor: 'rgba(0,60,100,1)',\r\n            },\r\n            {\r\n                label:'New Recovered',\r\n                data: active,\r\n               \r\n                backgroundColor:\r\n                \r\n                'rgb(0,255,0)',\r\n                borderColor: 'rgb(0,255,0)',\r\n              },\r\n              {\r\n                label:'New Deaths',\r\n                data: deceased,\r\n                backgroundColor:\r\n                \r\n                'rgba(246, 36, 89, 1)',\r\n                borderColor: 'rgba(242, 38, 19, 1)',\r\n              }\r\n          ]\r\n        }\r\n      });\r\n  \r\n    })\r\n    .catch(error => {\r\n        //console.log(error)\r\n    })\r\n}\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'bottom',\r\n    location:'City'\r\n  }\r\n\r\n\r\n  render(){\r\n      \r\n    return (\r\n      \r\n      <div className=\"chart\" >\r\n          <br></br>\r\n          <br></br>\r\n          <div style={{width:1100,marginLeft:\"50px\"}}>\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'New Cases v/s Recovered v/s Deaths',\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n          className=\"elements\" />\r\n        </div>\r\n\r\n\r\n        \r\n        \r\n        \r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default New;","import React, {Component} from 'react';\r\nimport {Bar, Line, Bubble, Scatter} from 'react-chartjs-2';\r\nimport Axios from 'axios';\r\nimport Chart from './Chart'\r\n\r\nimport Stats from './Stats'\r\nimport New from './New'\r\n\r\n\r\nimport './Style.css'\r\n\r\nclass Details extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData:props.chartData,\r\n      posts:[]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    Axios.get('https://api.covid19india.org/data.json')\r\n    .then(response => {\r\n        //console.log(response)\r\n        this.setState({posts:response.data.cases_time_series})\r\n        //console.log(response.data.cases_time_series)\r\n        \r\n        \r\n        const posts = response.data.cases_time_series\r\n        //console.log(posts)\r\n        var states=[]\r\n        \r\n        var confirmed=[]\r\n        var active=[]\r\n        var deceased=[]\r\n\r\n        for (var i=31;i<posts.length;i+=1) {\r\n          states[i-31]=posts[i].date\r\n          confirmed[i-31]=posts[i].totalconfirmed\r\n          deceased[i-31]=posts[i].totaldeceased\r\n          active[i-31]=parseInt(posts[i].totalconfirmed) - parseInt(posts[i].totaldeceased) - parseInt(posts[i].totalrecovered)\r\n        }\r\n        //console.log(states)\r\n        // //console.log(num)\r\n        this.setState({\r\n        chartData:{\r\n            labels: states\r\n          \r\n          \r\n          ,\r\n          datasets:[\r\n            {\r\n              label:'Total Confirmed Cases',\r\n              data: confirmed,\r\n              fill:false,\r\n              borderColor: 'rgba(34, 167, 240, 1)',\r\n            },\r\n            {\r\n                label:'Total Active Cases',\r\n                data: active,\r\n                fill:false,\r\n                borderColor: 'rgba(249, 105, 14, 1)',\r\n              },\r\n              {\r\n                label:'Total Deaths',\r\n                fill:false,\r\n                data: deceased,\r\n                borderColor: 'rgba(247, 202, 24, 1)',\r\n              }\r\n          ]\r\n        }\r\n      });\r\n  \r\n    })\r\n    .catch(error => {\r\n        //console.log(error)\r\n    })\r\n}\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'bottom',\r\n    location:'City'\r\n  }\r\n\r\n\r\n  render(){\r\n      \r\n    return (\r\n      \r\n      <div className=\"chart\" >\r\n          <h1 className=\"elements\">Stats from India</h1>\r\n          <br></br>\r\n          <div style={{width:1100,marginLeft:\"50px\"}}>\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'Total Confirmed v/s Active v/s Dead',\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n          className=\"elements\" />\r\n        </div>\r\n\r\n        <br></br>\r\n        <br></br>\r\n          <New />\r\n\r\n        <br></br>\r\n        <br></br>\r\n        <div style={{width:1100,marginLeft:\"50px\"}}>\r\n        <Stats />\r\n        </div>\r\n\r\n        <br></br>\r\n\r\n        <div style={{width:1100,marginLeft:\"50px\"}}>\r\n        <Chart />\r\n        </div>\r\n        <br></br>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Details;","import React from \"react\";\nimport logo from './logo.svg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChartBar,faGlobe,faPoll,faBuilding,faHome,fagithub} from '@fortawesome/free-solid-svg-icons'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CaseList from './component/CaseList';\nimport Countries from './component/Countries';\nimport World from './component/World';\nimport TopDistricts from './component/TopDistricts'\nimport './App.css';\n\nimport Details from './component/Details'\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"main\">\n        <nav className=\"nav\">\n          \n          <span className=\"route\">\n            \n              <Link to=\"/\" className=\"indent\"><h2>India <FontAwesomeIcon icon={faHome} className=\"icon\" /></h2></Link>\n              \n              <Link to=\"/Districts\" className=\"indent\"><h2>Districts <FontAwesomeIcon icon={faBuilding} className=\"icon\" /></h2></Link>\n              \n              <Link to=\"/Countries\" className=\"indent\"><h2>Countries <FontAwesomeIcon icon={faPoll} className=\"icon\" /></h2></Link>\n              \n              \n              <Link to=\"/World\" className=\"indent\"><h2>World <FontAwesomeIcon icon={faGlobe} className=\"icon\" /></h2></Link>\n\n              <Link to=\"/Stats\" className=\"indent\"><h2>Stats  <FontAwesomeIcon icon={faChartBar} className=\"icon\" /></h2></Link>\n              \n            </span>\n          \n        </nav>\n\n        <Switch>\n          \n        <Route path=\"/Districts\" >\n            <br></br>\n            <TopDistricts />\n          </Route>\n\n        <Route path=\"/Stats\" >\n            <br></br>\n            <Details  />\n          </Route>\n\n          <Route path=\"/World\" >\n            <br></br>\n            <World />\n          </Route>\n\n          <Route path=\"/Countries\">\n          <br></br>\n            <Countries />\n          </Route>\n\n          <Route path=\"/\">\n          <br></br>\n          <CaseList />\n          </Route>\n\n        </Switch>\n        <br></br>\n        <br></br>\n        <div className=\"App\">\n      <header className=\"App-header\">\n      <p>\n          Made with React \n        </p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n    </div>\n      </div>\n    </Router>\n    \n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}